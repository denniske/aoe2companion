
on:
  push:
    tags:
      - 'desktop-v*'

name: Desktop

env:
  NODE_VERSION: 16.13.0
  SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_AOE2COMPANION_CREDENTIAL }}

jobs:

  web-build:
    name: Web-Build
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Env
        uses: ./.github/actions/setup
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: echo "APP=$(node deploy/script/aoe-from-tag.js $TRAVIS_BRANCH)" >> $GITHUB_ENV

      - name: Build
        run: |
          yarn
          yarn expo export:web 

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: web-build



  windows:
    name: Windows
    runs-on: windows-2019
    needs: [web-build]
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Env
        uses: ./.github/actions/setup
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: |
          iwr https://get.secrethub.io/windows | iex
          (get-item (where.exe secrethub)).DirectoryName | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - run: |
          echo "ELECTRON_WINDOWS_CERT_BASE64=$(secrethub read denniske/aoe2companion/electron_windows_cert_base64)" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$(secrethub read denniske/aoe2companion/electron_windows_cert_password)" >> $GITHUB_ENV

      - run: echo "VERSION=$(node deploy/script/version-from-tag.js $TRAVIS_BRANCH)" >> $GITHUB_ENV
      - run: echo $VERSION

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: web-build
          path: electron/dist

      - name: Build
        run: |
          cd electron
          echo $ELECTRON_WINDOWS_CERT_BASE64 | base64 --decode > certificate.pfx
          yarn
          yarn run electron:serve-tsc
          yarn run electron:build:ci --publish never -c.extraMetadata.version=$VERSION

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: electron/release/aoe2companion-${{ env.VERSION }}.exe
          tag: ${{ github.ref }}
          overwrite: true

#  macos:
#    name: MacOS
#    runs-on: macos-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Setup Env
#        uses: ./.github/actions/setup
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#
#      - run: brew install secrethub/tools/secrethub-cli
#
#      - run: |
#          echo "ELECTRON_APPLE_CERT_BASE64=$(secrethub read denniske/aoe2companion/electron_apple_cert_base64)" >> $GITHUB_ENV
#
#      - run: echo "VERSION=$(node deploy/script/version-from-tag.js $TRAVIS_BRANCH)" >> $GITHUB_ENV
#      - run: echo $VERSION
#
#      - name: Build
#        run: |
#          cd electron
#          echo $ELECTRON_APPLE_CERT_BASE64 | base64 --decode > certificate.p12
#          yarn --frozen-lockfile --network-timeout 100000
#          yarn run build:prod
#          yarn run electron:build -c.extraMetadata.version=$VERSION
#
#      - name: Upload binaries to release
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          file: electron/release/aoe2companion-${{ env.VERSION }}.dmg
#          tag: ${{ github.ref }}
#          overwrite: true
